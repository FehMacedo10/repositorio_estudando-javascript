//! AULA 12 - HERAN√áA


//? üìö O Que √© Heran√ßa?
//* A heran√ßa √© um mecanismo que permite que uma classe (subclasse) receba atributos e m√©todos de outra classe (superclasse).

//? üí° Exemplo no mundo real:
//* Classe Pai: Ve√≠culo (atributos: rodas, motor; m√©todos: acelerar, frear).
//* Classe Filha: Carro (herda atributos e m√©todos de Ve√≠culo, mas pode adicionar caracter√≠sticas pr√≥prias, como ar-condicionado).

class Veiculo {
  constructor(marca, modelo) {
    this.marca = marca;
    this.modelo = modelo;
  }

  imprimirInformacoes() {
    console.log(`${this.marca} - ${this.modelo}`);
  }
}

class Carro extends Veiculo {
  constructor(marca, modelo, numeroPortas) {
    super(marca, modelo);
    this.numeroPortas = numeroPortas;
  }

  abrirPortas() {
    console.log(`Abrindo as ${this.numeroPortas} portas desse carro`);
  }
}

class Moto extends Veiculo {
  darGrau() {
    console.log("Dando grau");
  }
}

const carro1 = new Carro("Toyota", "Corolla", 4);
console.log(carro1.numeroPortas);
carro1.imprimirInformacoes();
carro1.abrirPortas();

const moto1 = new Moto("Honda", "Biz");
moto1.darGrau();


//? üîç Como Funciona a Heran√ßa no JavaScript
//* Criando a Superclasse:
  //* A superclasse √© a classe que cont√©m os atributos e m√©todos que ser√£o herdados.

class Animal {
  constructor(nome) {
    this.nome = nome;
  }

  fazerSom() {
    console.log(`${this.nome} est√° fazendo um som!`);
  }
}

//* Criando a Subclasse:
  //* A subclasse √© a classe que herda os atributos e m√©todos da superclasse.

class Cachorro extends Animal {
  constructor(nome, raca) {
    
    //* Chamando o Construtor da Superclasse:
    
    super(nome); //* Use a palavra-chave super para chamar o construtor da superclasse.
    this.raca = raca;
  }

  latir() {
    console.log(`${this.nome}, da ra√ßa ${this.raca}, est√° latindo!`);
  }
}

//? ### **Sobrescrita de M√©todos (Override)**
//* Uma subclasse pode sobrescrever m√©todos da superclasse para personalizar seu comportamento.

class Animal1 {
  fazerSom() {
    console.log("Algum som gen√©rico!");
  }
}

class Gato extends Animal1 {
  fazerSom() {
    console.log("Miau!");
  }
}

const meuGato = new Gato();
meuGato.fazerSom(); // Sa√≠da: Miau!

//* Sistema de Funcion√°rios:
class Funcionario {
  constructor(nome, salario) {
    this.nome = nome;
    this.salario = salario;
  }

  exibirInfo() {
    console.log(`${this.nome} tem um sal√°rio de R$${this.salario}.`);
  }
}

class Gerente extends Funcionario {
  constructor(nome, salario, setor) {
    super(nome, salario);
    this.setor = setor;
  }

  exibirInfo() {
    console.log(
      `${this.nome} √© gerente do setor ${this.setor}, com sal√°rio de R$${this.salario}.`
    );
  }
}

const gerente = new Gerente("Ana", 8000, "RH");
gerente.exibirInfo(); // Sa√≠da: Ana √© gerente do setor RH, com sal√°rio de R$8000.

class Animal2 {
  mover() {
    console.log("O animal est√° se movendo.");
  }
}

class Passaro extends Animals2 {
  mover() {
    console.log("O p√°ssaro est√° voando! ü¶Ö");
  }
}

class Peixe extends Animal2 {
  mover() {
    console.log("O peixe est√° nadando! üêü");
  }
}

const passaro = new Passaro();
const peixe = new Peixe();
passaro.mover(); // Sa√≠da: O p√°ssaro est√° voando! ü¶Ö
peixe.mover();   // Sa√≠da: O peixe est√° nadando! üêü

//? üõ†Ô∏è Dicas Importantes
//* - **Use a Heran√ßa com Modera√ß√£o:**
  //* Nem tudo precisa ser resolvido com heran√ßa. √Äs vezes, compor objetos √© uma solu√ß√£o mais adequada.
//* Cuidado com Sobrescrita:
  //* Certifique-se de que sobrescrever m√©todos n√£o cause comportamento inesperado.
//* Aproveite a Reutiliza√ß√£o de C√≥digo:
  //* Heran√ßa √© √≥tima para evitar duplica√ß√£o, mas mantenha as classes coesas e com responsabilidades claras.

//! EXERCICIOS

// EXERCICIO 01
class Forma {
  calcularArea() {
    console.log("M√©todo calcularArea() deve ser implementado na subclasse.");
  }
}

class Quadrado extends Forma {
  constructor(lado) {
    super();
    this.lado = lado;
  }

  calcularArea() {
    return this.lado * this.lado;
  }
}

class Circulo extends Forma {
  constructor(raio) {
    super();
    this.raio = raio;
  }

  calcularArea() {
    return Math.PI * this.raio * this.raio;
  }
}

const quadrado = new Quadrado(4);
console.log(`√Årea do quadrado: ${quadrado.calcularArea()}`); // Sa√≠da: √Årea do quadrado: 16

const circulo = new Circulo(3);
console.log(`√Årea do c√≠rculo: ${circulo.calcularArea()}`); // Sa√≠da: √Årea do c√≠rculo: 28.274333882308138

// EXERCICIO 02
class Conta {
  constructor(saldo) {
    this.saldo = saldo;
  }

  depositar(valor) {
    this.saldo += valor;
    console.log(`Dep√≥sito de R$${valor} realizado. Saldo atual: R$${this.saldo}.`);
  }

  sacar(valor) {
    if (valor <= this.saldo) {
      this.saldo -= valor;
      console.log(`Saque de R$${valor} realizado. Saldo atual: R$${this.saldo}.`);
    } else {
      console.log("Saldo insuficiente.");
    }
  }

  exibirSaldo() {
    console.log(`Saldo atual: R$${this.saldo}.`);
  }
}

class ContaPoupanca extends Conta {
  constructor(saldo, taxaJuros) {
    super(saldo);
    this.taxaJuros = taxaJuros;
  }

  adicionarJuros() {
    const juros = this.saldo * this.taxaJuros / 100;
    this.saldo += juros;
    console.log(`Juros de R$${juros} adicionados. Saldo atual: R$${this.saldo}.`);
  }
}

const contaPoupanca = new ContaPoupanca(1000, 1);
contaPoupanca.exibirSaldo(); // Sa√≠da: Saldo atual: R$1000.
contaPoupanca.adicionarJuros(); // Sa√≠da: Juros de R$10 adicionados. Saldo atual: R$1010.
contaPoupanca.depositar(500); // Sa√≠da: Dep√≥sito de R$500 realizado. Saldo atual: R$1510.
contaPoupanca.sacar(200); // Sa√≠da: Saque de R$200 realizado. Saldo atual: R$1310.
