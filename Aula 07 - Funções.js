//! AULA 7 - FUN√á√ïES

//?üìö O Que √© uma Fun√ß√£o?**

//* Uma **fun√ß√£o** √© um bloco de c√≥digo que realiza uma tarefa espec√≠fica. Voc√™ pode pensar nela como um **mini-programa** dentro do seu programa principal.

function darBoaTarde(nome) {
    console.log(`Boa tarde!, ${nome}!`);
}

darBoaTarde("Felipe");
darBoaTarde("Solange");
darBoaTarde("Jos√©");

function somar(numeroA, numeroB) {
    return numeroA + numeroB;
}

let resultado = somar(1, 2);
console.log(resultado);

function calculadora(A, B, operacao) {
    switch (operacao) {
        case '+':
            return A + B;
        case '-':
            return A - B;
        case '*':
            return A * B;
        case '/':
            return A / B;
        default:
            console.log("Opera√ß√£o Inv√°lida");
            break;
    } 
}

let result = calculadora(10, 2, '-');
console.log(result);

// Declara√ß√£o de Fun√ß√£o (Function Declaration):
function sum(a, b) {
    return a + b;
}
console.log(sum(2, 3));  // Sa√≠da: 5

// Express√£o de Fun√ß√£o (Function Expression):
const multiplicar = function(a, b) {
    return a * b;
}
console.log(multiplicar(4, 5));  // Sa√≠da: 20

//  Arrow Function (ES6):
const dividir = (a, b) => a / b;

console.log(dividir(10, 2));  // Sa√≠da: 5

// Fun√ß√µes com Par√¢metros:
// Par√¢metros s√£o como "ingredientes" que a fun√ß√£o precisa para funcionar.
function cumprimentar(nome) {
    return `Ol√°, ${nome}!`;
}

console.log(cumprimentar("Jo√£o"));  // Sa√≠da: Ol√°, Jo√£o!

// Fun√ß√µes Sem Retorno:
// Nem todas as fun√ß√µes precisam retornar um valor.
function exibirMensagem(mensagem) {
    console.log(mensagem);
}

exibirMensagem("Bem-vindo ao curso!");  // Sa√≠da: Bem-vindo ao curso!

// Fun√ß√µes com Valor Padr√£o:
// Voc√™ pode definir valores padr√£o para os par√¢metros.
function somar(a = 0, b = 0) {
    return a + b;
}

console.log(somar(5));  // Sa√≠da: 5 (b = 0 por padr√£o)

// Fun√ß√µes de Alta Ordem
// Fun√ß√µes de alta ordem s√£o aquelas que recebem outras fun√ß√µes como argumentos ou retornam fun√ß√µes.
function calcular(a, b, operacao) {
    return operacao(a, b);
}

const soma = (a, b) => a + b;
const multi = (a, b) => a * b;

console.log(calcular(5, 3, somar));       // Sa√≠da: 8
console.log(calcular(5, 3, multiplicar)); // Sa√≠da: 15

//! EXERCICIOS

// EXERC√çCIO 01
function dobro(numA) {
    return numA * 2;
}

console.log(dobro(10)); // Sa√≠da: 20

// Arrow Function
const numeroDobro = (numeroA) => numeroA * 2;
console.log(numeroDobro(10)); // Sa√≠da: 20

// EXERC√çCIO 02
function boasVindas(nome) {
    console.log(`Bem vindo, ${nome}!`);
}
boasVindas("Felipe"); // Bem vindo Felipe!

// Arrow Function
const bemVindo = (nome) => console.log(`Bem vindo a nossa casa ${nome}!`);
bemVindo("Felipe"); // Sa√≠da: Bem vindo a nossa casa Felipe

// EXERC√çCIO 03
function maior(A, B) {
    if (A > B) {
        return A;
    } else if (B > A) {
        return B;
    } else {
        console.log("Os 2 n√∫meros s√£o iguais");
    }
}

console.log(maior(3, 4)); // Sa√≠da: 4

// EXERC√çCIO 04
function media (A, B, C) {
    return (A + B + C) / 3;
}
console.log(media(2, 2, 2)); // Sa√≠da: 2

// Arrow Function
const funcaoMedia = (A, B, C) => (A + B + C) / 3;
console.log(funcaoMedia(3, 4, 3)); //Sa√≠da: 3,333...

// EXERC√çCIO 05
function somaArray (numbers = []) {
    let resultadoSoma = 0; // Declarando a vari√°vel para armazenar o resultado da soma
    for (let i = 0; i < numbers.length; i++) {
        resultadoSoma += numbers[i]; // Somando cada elemento do array
    }
    
    return resultadoSoma;
}

let number = []
number.push(1);
number.push(2);
number.push(3);
console.log(number) // Sa√≠da: [1, 2, 3]
console.log(somaArray(number)); // Sa√≠da: 6



// EXERC√çCIO 06
function string (palavra) {
    return palavra.length;
}

console.log(string("Felipe")); // Sa√≠da: 6

// Arrow Function
const tamanhoDaPalavra = (palavra) => palavra.length;
console.log(string("Solange")); // Sa√≠da: 7